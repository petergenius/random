#!/usr/bin/env python3
import random, string
def is_real(field,y,x):
    height = len(field)-1
    length = len(field[0])-1
    if x >= 0 and x <= length and y >= 0 and y <= height:
        return True
    else:
        return False
def check_for_bombs(field,x, y):
    count = 0
    if is_real(field,y,x-1):
        if field[y][x-1] == 'X':
            count += 1
    if is_real(field,y,x+1):
        if field[y][x+1] == 'X':
            count += 1
    if is_real(field,y+1,x):
        if field[y+1][x] == 'X':
            count += 1
    if is_real(field,y-1,x):
        if field[y-1][x] == 'X':
            count += 1
    if is_real(field,y-1,x-1):
        if field[y-1][x-1] == 'X':
            count += 1
    if is_real(field,y+1,x+1):
        if field[y+1][x+1] == 'X':
            count += 1
    if is_real(field,y+1,x-1):
        if field[y+1][x-1] == 'X':
            count += 1
    if is_real(field,y-1,x+1):
        if field[y-1][x+1] == 'X':
            count += 1
    return count

def add_char(field,pair,char):
    x = pair[0]
    y = pair[1]
    field[y][x] = char
    return field

def add_all_bombs(grid,field_coords,num_of_bombs):
    for count in range(num_of_bombs):
        coord = random.choice(field_coords)
        field_coords.remove(coord)
        grid = add_char(grid,coord,'X')
    return grid
def make_field(length,height,num_of_bombs):
    if length * height < num_of_bombs:
        print('too many bombs!')
        exit()
    blank = []
    bomb_pairs = []
    for row in range(height):
        blank.append(['#']*length)
        for cell in range(length):
            bomb_pairs.append([cell,row])
    field = add_numbers(add_all_bombs(blank, bomb_pairs, num_of_bombs))
    return field
def add_numbers(grid):
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if grid[y][x] != 'X':
                grid[y][x] = check_for_bombs(grid,x,y)
    return grid
def add_markers(grid,alphabet):
    top = [' ']
    for count in range(len(grid[0])):
        top.append(alphabet[count])
    
    grid.insert(0,top)
    print(grid)
    for row_num in range(len(grid)):
        if row_num != 0:
            grid[row_num].insert(0,row_num)
    return grid
def get_user_cell(alphabet):
    cell = input(' > ')
    y = alphabet.index(cell[0]) #the letter
    x = int(cell[1:]) #the number
    return x, y
def print_grid(grid):
    for row in grid:
        for char in row:
            print(char,end=' ')
        print('\n')
alphabet = list(string.ascii_lowercase + string.ascii_uppercase)
length = int(input('length of field > '))
height = int(input('height of field > '))
bombs = int(input('number of bombs > '))
field = make_field(length, height, bombs)
blank = [len(field[0]) * ['#']] * len(field)

#print(field)
#print(blank)
user_grid = add_markers(blank, alphabet)
print(user_grid)
print_grid(field)
x, y = get_user_cell(alphabet)
if field[y][x] == 'X':
    print('you hit a bomb')
else:
    pass
    #pretty_form = add_char(field,[y,x],str(check_for_bombs(field,x,y)))
    #print_grid(make_pretty(field))
