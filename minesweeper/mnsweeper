#!/usr/bin/env python3
import random, string, skilstak.colors as c
def is_real(grid,y,x):
    height = len(grid)-1
    length = len(grid[0])-1
    if x >= 0 and x <= length and y >= 0 and y <= height:
        return True
    else:
        return False

def check_for_bombs(grid,x, y):
    count = 0
    if is_real(grid,y,x-1):
        if grid[y][x-1] == 'X':
            count += 1
    if is_real(grid,y,x+1):
        if grid[y][x+1] == 'X':
            count += 1
    if is_real(grid,y+1,x):
        if grid[y+1][x] == 'X':
            count += 1
    if is_real(grid,y-1,x):
        if grid[y-1][x] == 'X':
            count += 1
    if is_real(grid,y-1,x-1):
        if grid[y-1][x-1] == 'X':
            count += 1
    if is_real(grid,y+1,x+1):
        if grid[y+1][x+1] == 'X':
            count += 1
    if is_real(grid,y+1,x-1):
        if grid[y+1][x-1] == 'X':
            count += 1
    if is_real(grid,y-1,x+1):
        if grid[y-1][x+1] == 'X':
            count += 1
    return count

def add_char(grid,pair,char):
    x = pair[0]
    y = pair[1]
    grid[y][x] = char
    return grid

def add_all_bombs(grid,field_coords,num_of_bombs):
    for count in range(num_of_bombs):
        coord = random.choice(field_coords)
        field_coords.remove(coord)
        grid = add_char(grid,coord,'X')
    return grid
def make_field(length,height,num_of_bombs):
    if length * height < num_of_bombs:
        print('too many bombs!')
        exit()
    blank = []
    bomb_pairs = []
    for row in range(height):
        blank.append(['#']*length)
        for cell in range(length):
            bomb_pairs.append([cell,row])
    field = add_numbers(add_all_bombs(blank, bomb_pairs, num_of_bombs))
    return field
def add_numbers(grid):
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if grid[y][x] != 'X':
                grid[y][x] = str(check_for_bombs(grid,x,y))
    return grid
def add_info(grid):
    my_grid = []
    alphabet = list(string.ascii_lowercase + string.ascii_uppercase)
    top = [' ']
    for count in range(len(grid[0])):
        top.append(alphabet[count])
    
    my_grid.append(top)
    for row_num in range(len(grid)):
        if row_num != 0:
            row = grid[row_num][:]
            full_row = [str(row_num)] + row
            my_grid.append(full_row)
    return my_grid

def print_fancy(grid):
    print(c.cl) 
    for row in grid:
        for char in row:
            print(char,end=' ')
        print('\n')
def get_user_cell():
    alphabet = list(string.ascii_lowercase + string.ascii_uppercase)
    cell = input(' > ')
    y = alphabet.index(cell[0]) #the letter
    x = int(cell[1:]) #the number
    return x, y

def has_bomb(grid):
    for row in grid:
        for character in grid:
            if character == 'X':
                return False

    return True
length = int(input('length of field > '))
height = int(input('height of field > '))
#I shouldn't have to add one to height, but I'm too lazy to fix it
bombs = int(input('number of bombs > '))
field = make_field(length, height+1, bombs)
blank = [['#'] * len(field[0]) for n in range(len(field))]
#http://stackoverflow.com/questions/240178/python-list-of-lists-changes-reflected-across-sublists-unexpectedly
counter = length*height-bombs
while counter > 0:
    
    print_fancy(add_info(blank))
    x, y = get_user_cell()
    if field[x][y] == 'X':
        print('You hit a bomb')
        blank[x][y] = 'X'
    else:
        if blank[x][y] == '#':
            counter -= 1
            blank[x][y] = field[x][y]
        else:
            print('You already got that square')

print(has_bomb(blank))
